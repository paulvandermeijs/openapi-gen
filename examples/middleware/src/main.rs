//! reqwest-middleware Integration Example
//!
//! This example demonstrates the middleware feature of openapi-gen which provides
//! full integration with reqwest-middleware for advanced HTTP client capabilities:
//! - Automatic retries with exponential backoff
//! - Request/response logging and tracing
//! - Custom middleware for authentication, caching, rate limiting
//! - Observability and metrics collection
//!
//! The middleware feature generates specialized client implementations that work
//! seamlessly with reqwest-middleware's tower-like middleware stack.

use openapi_gen::openapi_client;
use reqwest_middleware::{ClientBuilder, ClientWithMiddleware};
use reqwest_retry::{RetryTransientMiddleware, policies::ExponentialBackoff};
use std::time::Duration;

// Generate the API client with middleware support
// This creates both regular reqwest::Client and reqwest_middleware::ClientWithMiddleware implementations
openapi_client!("https://petstore3.swagger.io/api/v3/openapi.json", "PetstoreApi");

#[tokio::main]
async fn main() -> Result<(), Box<dyn std::error::Error>> {
    // Example 1: Standard reqwest client (no middleware)
    let standard_client = PetstoreApi::new("https://petstore3.swagger.io/api/v3");
    
    match standard_client.get_pet_by_id(1).await {
        Ok(pet) => println!("Standard client - Found pet: {}", pet.name),
        Err(e) => eprintln!("Standard client - Error: {}", e),
    }
    
    // Example 2: Client with retry middleware
    // This demonstrates automatic retries with exponential backoff
    let retry_policy = ExponentialBackoff::builder().build_with_max_retries(3);
    
    let middleware_client: ClientWithMiddleware = ClientBuilder::new(reqwest::Client::new())
        .with(RetryTransientMiddleware::new_with_policy(retry_policy))
        .build();
    
    // Use the middleware client with the generated API
    // This uses the specialized middleware implementation generated by the middleware feature
    let retry_api = PetstoreApi::with_client(
        "https://petstore3.swagger.io/api/v3",
        middleware_client
    );
    
    match retry_api.get_pet_by_id(2).await {
        Ok(pet) => println!("Retry client - Found pet: {}", pet.name),
        Err(e) => eprintln!("Retry client - Failed after retries: {}", e),
    }
    
    // Example 3: Advanced middleware stack
    // Combine multiple middleware components for production use
    let base_client = reqwest::Client::builder()
        .timeout(Duration::from_secs(30))
        .user_agent("PetstoreApp/1.0 (middleware)")
        .build()?;
    
    let advanced_middleware: ClientWithMiddleware = ClientBuilder::new(base_client)
        .with(RetryTransientMiddleware::new_with_policy(
            ExponentialBackoff::builder().build_with_max_retries(2)
        ))
        // You can add more middleware here:
        // .with(TracingMiddleware::new())
        // .with(LoggingMiddleware::new())
        // .with(AuthMiddleware::new())
        .build();
    
    let advanced_api = PetstoreApi::with_client(
        "https://petstore3.swagger.io/api/v3",
        advanced_middleware
    );
    
    match advanced_api.find_pets_by_status("available").await {
        Ok(pets) => println!("Advanced middleware - Found {} pets", pets.len()),
        Err(e) => eprintln!("Advanced middleware - Error: {}", e),
    }
    
    // Example 4: Testing middleware behavior with failures
    // Create a client that will fail to demonstrate retry behavior
    println!("\n--- Testing Retry Behavior ---");
    
    let failing_middleware: ClientWithMiddleware = ClientBuilder::new(
        reqwest::Client::builder()
            .timeout(Duration::from_secs(1)) // Very short timeout to force failures
            .build()?
    )
    .with(RetryTransientMiddleware::new_with_policy(
        ExponentialBackoff::builder().build_with_max_retries(2)
    ))
    .build();
    
    // Use an endpoint that might timeout to demonstrate retries
    let failing_api = PetstoreApi::with_client(
        "https://petstore3.swagger.io/api/v3",
        failing_middleware
    );
    
    println!("Testing with very short timeout (retries expected)...");
    match failing_api.get_pet_by_id(999).await {
        Ok(pet) => println!("Unexpectedly succeeded: {}", pet.name),
        Err(e) => println!("Failed as expected after retries: {}", e),
    }
    
    // Example 5: Middleware with custom configuration
    let custom_middleware: ClientWithMiddleware = ClientBuilder::new(
        reqwest::Client::builder()
            .timeout(Duration::from_secs(15))
            .default_headers({
                let mut headers = reqwest::header::HeaderMap::new();
                headers.insert("X-API-Client", "middleware-example".parse()?);
                headers
            })
            .build()?
    )
    .with(RetryTransientMiddleware::new_with_policy(
        ExponentialBackoff::builder()
            .build_with_max_retries(1) // Only 1 retry for this example
    ))
    .build();
    
    let custom_api = PetstoreApi::with_client(
        "https://petstore3.swagger.io/api/v3",
        custom_middleware
    );
    
    match custom_api.get_pet_by_id(3).await {
        Ok(pet) => println!("Custom middleware - Found pet: {}", pet.name),
        Err(e) => eprintln!("Custom middleware - Error: {}", e),
    }
    
    println!("\n✅ reqwest-middleware integration examples completed!");
    println!("\nKey benefits demonstrated:");
    println!("  🔄 Automatic retries with exponential backoff");
    println!("  🏗️  Composable middleware stack");
    println!("  🎯 Seamless integration with generated client");
    println!("  ⚙️  Configurable retry policies and timeouts");
    
    // Available middleware options (add to Cargo.toml dependencies):
    //
    // - reqwest-retry: Automatic retries with various policies
    // - reqwest-tracing: OpenTelemetry/tracing integration
    // - Custom middleware for:
    //   * Authentication token refresh
    //   * Request/response logging
    //   * Caching
    //   * Rate limiting
    //   * Metrics collection
    //   * Request deduplication
    
    Ok(())
}